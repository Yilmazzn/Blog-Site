{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch(url).then(res => {\n      if (!res.ok) throw Error('Could not fetch data');\n      return res.json();\n    }).then(fetchedData => {\n      setData(fetchedData);\n      setIsPending(false);\n      setError(false);\n    }).catch(err => {\n      setIsPending(false);\n      setError(err.message);\n    });\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/yilma/Desktop/Projects/React-Tutorial/dojo-blog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","fetch","then","res","ok","Error","json","fetchedData","catch","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAEtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAACP,GAAD,CAAL,CACGQ,IADH,CACQC,GAAG,IAAI;AACX,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa,MAAMC,KAAK,CAAC,sBAAD,CAAX;AACb,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KAJH,EAKGJ,IALH,CAKQK,WAAW,IAAI;AACnBX,MAAAA,OAAO,CAACW,WAAD,CAAP;AACAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KATH,EAUGQ,KAVH,CAUSC,GAAG,IAAI;AACZX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACS,GAAG,CAACC,OAAL,CAAR;AACD,KAbH;AAcD,GAfM,EAeJ,CAAChB,GAAD,CAfI,CAAT;AAiBE,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACL,CAxBD;;GAAMN,Q;;AA0BN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [isPending, setIsPending] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n          .then(res => {\r\n            if (!res.ok) throw Error('Could not fetch data');\r\n            return res.json();\r\n          })\r\n          .then(fetchedData => {\r\n            setData(fetchedData);\r\n            setIsPending(false);\r\n            setError(false);\r\n          })\r\n          .catch(err => {\r\n            setIsPending(false);\r\n            setError(err.message);\r\n          });\r\n      }, [url]);\r\n\r\n      return {data, isPending, error};\r\n}\r\n\r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}